#!/usr/bin/python3

import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
import json
import os
import time

script_log = ""
fail_time_interval = 2
num_retries = 4

username = os.environ.get('VAR_SL_USERNAME')
if username is None:
    print("Environment variable VAR_SL_USERNAME is not set.")
    exit(1)

password = os.environ.get('VAR_SL_PASSWORD')
if password is None:
    print("Environment variable VAR_SL_PASSWORD is not set.")
    exit(1)

inner_circle_name = os.environ.get('VAR_INNER_CIRCLE_NAME')
if inner_circle_name is None:
    print("Environment variable VAR_INNER_CIRCLE_NAME is not set.")
    exit(1)

checkout_url = os.environ.get('VAR_CHECKOUT_URL')
if checkout_url is None:
    print("Environment variable VAR_CHECKOUT_URL is not set.")
    exit(1)

notify_email = os.environ.get('VAR_NOTIFY_EMAIL')
if notify_email is None:
    print("Environment variable VAR_NOTIFY_EMAIL is not set.")
    exit(1)

output_obj = {
    "inner_circle_name": inner_circle_name,
    "checkout_url": checkout_url,
    "notify_email": notify_email,
    "check_success": False
}

# Start a session to persist cookies
session = requests.Session()

# Get the login page first to grab the nonce (CSRF token)
login_page = session.get('https://www.samuelleeds.com/my-account/')
soup = BeautifulSoup(login_page.text, 'html.parser')

# Find the WooCommerce nonce token
nonce_input = soup.find('input', {'name': 'woocommerce-login-nonce'})
if not nonce_input:
    raise Exception("Login nonce not found")
nonce = nonce_input['value']

# Construct login data
login_data = {
    'username': username,
    'password': password,
    'woocommerce-login-nonce': nonce,
    '_wp_http_referer': '/my-account/',
    'login': 'Log in'
}

# Submit the login form
response = session.post('https://www.samuelleeds.com/my-account/', data=login_data)

# Check if login was successful by looking for a redirect or logged-in text
if "From your account dashboard you can view your" not in response.text:
    script_log += "Login Failed "
    output_obj["script_log"] = script_log
    output_obj["check_success"] = False
    print(json.dumps(output_obj))
    exit(0)

##print("âœ… Login successful")
##print("Cookies:", session.cookies.get_dict())


# Step 3: Visit the checkout page
def visit_checkout_page(checkout_url, num_retries_left):
    global script_log    
    checkout_response = session.get(checkout_url)

    if checkout_response.status_code != 200:
        if num_retries_left>0:
            script_log += " load checkout fail retrying... "
            time.sleep(fail_time_interval)
            return visit_checkout_page(checkout_url, num_retries_left=num_retries_left-1)
        script_log += f"Failed to load checkout page: {checkout_response.status_code}"
        output_obj["script_log"] = script_log
        output_obj["check_success"] = False
        print(json.dumps(output_obj))
        exit(0)

    page_soup = BeautifulSoup(checkout_response.text, 'lxml')
    page_text = page_soup.get_text(separator='\n', strip=True)

    soup = BeautifulSoup(checkout_response.text, 'lxml')

    # Find the table
    table = soup.find('div', class_='wfacp_product_switcher_container')
    if not table:
        if num_retries_left>0:
            script_log += "cart table not found fail retrying... "
            time.sleep(fail_time_interval)
            return visit_checkout_page(checkout_url, num_retries_left=num_retries_left-1)
        script_log += f"Cart table not found in returned page"
        output_obj["script_log"] = script_log
        output_obj["check_success"] = False
        print(json.dumps(output_obj))
        exit(0)

    # Loop over each row (skip header if present)
    rows = table.find_all('fieldset')

    dates = []
    item_texts = []
    for row in rows:
        # You can access all <td> cells within the row
        item = row.find('span', class_='wfacp_product_switcher_item')
        item_texts.append(item.get_text(strip=True))
        match = re.search(r'(\d{2}/\d{2}/\d{2})', item.get_text(strip=True))
        if match:
            dates.append(match.group(1))
        #print(cell_texts)

    return (dates, item_texts)

##print("Found", len(dates), " dates")

(dates, item_texts) = visit_checkout_page(checkout_url, num_retries)

if len(item_texts) > 0:
    found = False
    for item_text in item_texts:
        if inner_circle_name.lower() in item_text.lower():
            found = True
    if not found:
        script_log += "inner_circle_name not in item text - retrying "
        time.sleep(1)
        (dates, item_texts) = visit_checkout_page(checkout_url)


has_event_in_future = False
for date in dates:
    event_date = datetime.strptime(date, '%d/%m/%y')
    # Get current datetime
    now = datetime.now()
    # Check if the date is in the future
    is_future = event_date > now
    if is_future:
        has_event_in_future = True

output_obj["dates"] = dates
output_obj["item_texts"] = item_texts
output_obj["has_event_in_future"] = has_event_in_future
output_obj["script_log"] = script_log
output_obj["check_success"] = True

print(json.dumps(output_obj))
exit(0)
