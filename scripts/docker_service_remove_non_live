#!/usr/bin/python3

import sys
import docker
import time

print("Start of " + sys.argv[0])

argsWrong = False

skipRunningCheck = False

expectedNumOfArgs=3
if len(sys.argv) != (expectedNumOfArgs + 1):
  #need to subtract one as 0 argument is the file name
  if len(sys.argv) == (expectedNumOfArgs + 1 + 1):
    if sys.argv[4] == "SkipRunningCheck":
      print("Recieved 4th param SkipRunningCheck")
      skipRunningCheck = True
    else:
      print("Arg 4 is wrong - got ", sys.argv[4])
      argsWrong = True
  else:
    argsWrong = True


if argsWrong:
  print("Wrong number of arguments expected " + str(expectedNumOfArgs) + " - got " + str(len(sys.argv)-1))
  print("Recieved args:")
  print(sys.argv)
  print("Expecting:")
  print("Arg 1: WS_NAME (Used to derive service name - saas_user_management_system)")
  print("Arg 2: VERSION  (Must be 3 . seperated numbers - 0.0.1)")
  print("Arg 3: IMAGE_PREFIX (e.g. dockerhub user - metcarob/)")
  print("Arg 4: SkipRunningCheck (optional)")
  print("-")
  exit(1)

print("Given a service name and version stops all services and removes all images that don't match that version")

ws_name = sys.argv[1]
version = sys.argv[2]
image_prefix = sys.argv[3]

version_digits = len(version.split('.'))

print("ws_name:" + ws_name)
print("version:" + version)
print("image_prefix:" + image_prefix)
print("version_digits:" + str(version_digits))

version_underscore = version.replace('.','_')

service_name = ws_name + "_" + version_underscore

client = docker.DockerClient(base_url='unix://var/run/docker.sock')

#Check the service is running at desired version and error if it is not


def isServiceThisWS(serviceName):
  if not serviceName.startswith(ws_name + "_"):
    return False
  a = serviceName.split("_")
  #We should have at least one item per version digit and a service name
  if len(a) < (version_digits+1):
    return False
  #Last version_digits items must all be numbers
  for x in range(1,version_digits+1):
    if not a[len(a)-x].isdigit():
      return False

  #First section must equal ws_name
  actualPrefix = ""
  for x in range(0,len(a)-version_digits):
    actualPrefix += a[x] + "_"
  if actualPrefix != (ws_name + "_"):
    return False
  return True

foundService = False

running_services_for_this_ws = []
service_id_lookup = {}

for service in client.services.list():
  if isServiceThisWS(service.name):
    if service.name == service_name:
      foundService = True
    else:
      running_services_for_this_ws.append(service.name)
      service_id_lookup[service.name] = service.id

if not skipRunningCheck:
  if foundService == False:
    print("Error - could not find live service")
    print("        (" + service_name + ")")
    exit(1)

    print("Check live service is running PASSED (" + service_name + ")")
else:
  print("Skipping live service running check")

#Sort services so they are removed in alphabetical order
running_services_for_this_ws.sort()

for service_name in running_services_for_this_ws:
  print("Removing old service " + service_name)
  service = client.services.get(service_id=service_id_lookup[service_name])
  ##print(service.tasks())
  ##Not getting image ID from task as there are multiple tasks and I am not sure
  ##if the result is valid
  service.remove()

images_to_remove = []

#Remove all images that are not the current service version
for image in client.images.list():
  for tag in image.tags:
    sp = tag.split(":")
    if len(sp)==2:
      if sp[0] == image_prefix + ws_name:
        if sp[1] != version:
          images_to_remove.append(tag)

images_to_remove.sort()

if len(images_to_remove)>0:
  print("Found " + str(len(images_to_remove)) + " images to remove")
  time.sleep(5)

failed_to_remove_images = []

for imgToRemove in images_to_remove:
  print("Removing Image " + imgToRemove)
  try:
    client.images.remove(imgToRemove)
  except docker.errors.APIError as err:
    if err.response.status_code != 409:
      raise(err)
    print(err)
    print("Got 409 First try error - saving for retry as service my not be stopped yet")
    failed_to_remove_images.append(imgToRemove)

if len(failed_to_remove_images)>0:
  print("Image removal failed with conflict - possibly the service needs time to terminate")
  print("Waiting 5 seconds and retrying...")
  time.sleep(5)
  for imgToRemove in failed_to_remove_images:
    print("Removing Image " + imgToRemove)
    client.images.remove(imgToRemove)

print("End of " + sys.argv[0])
exit(0)
